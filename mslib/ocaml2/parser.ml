(* type exp = N of int | S of string | V of string | Add of (exp*exp) | Sub of (exp*exp) | Mul of (exp*exp) | List of (exp list) | Dictle of (exp*exp) | Dictl of (exp list) | And of (exp*exp) | Or of (exp*exp) | Ife of (exp*exp*exp) | Div of (exp*exp) | Mod of (exp*exp) | Get of (exp*exp) | Listl of (exp list) | Isequal of (exp*exp) | Le of (exp*exp) | Ge of (exp*exp) | Ls of (exp*exp) | Gt of (exp*exp ) | Notequal of (exp*exp) | Not of exp | Attr of (exp*string) | None ;;
 *)
type exp = N of int | S of string | V of string | Binop of (string*exp*exp) | List of (exp list) | Dictle of (exp*exp) | Dictl of (exp list) | Ife of (exp*exp*exp) | Listl of (exp list) | Not of exp | Attr of (exp*string) | Fcall of exp*(exp list) | None | Get of (exp*exp) ;;

type inst = Skip | Tag of (exp*exp*inst) | Defn of (exp*exp*inst) | Forl of (exp*exp*exp*inst) | Listi of ( inst list) | Ifel of ((exp*inst) list) | Assign of (exp*exp);;
type token =
  | NUMBER of (int)
  | STRING of (string)
  | NAME of (string)
  | ADD
  | SUB
  | MUL
  | MOD
  | DIV
  | COLON
  | LPARENM
  | RPARENM
  | LPAREN
  | RPAREN
  | LPARENB
  | RPARENB
  | TRUE
  | FALSE
  | AND
  | OR
  | QUESTION
  | SEMICOLON
  | COMMA
  | EQUAL
  | IF
  | ELIF
  | ELSE
  | FOR
  | ISEQUAL
  | LE
  | GE
  | LS
  | GT
  | NOTEQUAL
  | NOT
  | DOT
  | NONE
  | DEFINE
  | ADDD
  | EOF

open Parsing;;
let yytransl_const = [|
  260 (* ADD *);
  261 (* SUB *);
  262 (* MUL *);
  263 (* MOD *);
  264 (* DIV *);
  265 (* COLON *);
  266 (* LPARENM *);
  267 (* RPARENM *);
  268 (* LPAREN *);
  269 (* RPAREN *);
  270 (* LPARENB *);
  271 (* RPARENB *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* AND *);
  275 (* OR *);
  276 (* QUESTION *);
  277 (* SEMICOLON *);
  278 (* COMMA *);
  279 (* EQUAL *);
  280 (* IF *);
  281 (* ELIF *);
  282 (* ELSE *);
  283 (* FOR *);
  284 (* ISEQUAL *);
  285 (* LE *);
  286 (* GE *);
  287 (* LS *);
  288 (* GT *);
  289 (* NOTEQUAL *);
  290 (* NOT *);
  291 (* DOT *);
  292 (* NONE *);
  293 (* DEFINE *);
  294 (* ADDD *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUMBER *);
  258 (* STRING *);
  259 (* NAME *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\007\000\
\008\000\008\000\004\000\004\000\006\000\006\000\005\000\005\000\
\009\000\009\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\002\000\
\002\000\011\000\011\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\005\000\
\001\000\003\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\004\000\002\000\003\000\
\001\000\003\000\002\000\003\000\001\000\003\000\002\000\003\000\
\003\000\004\000\004\000\002\000\003\000\002\000\003\000\002\000\
\001\000\003\000\004\000\009\000\007\000\002\000\002\000\001\000\
\002\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\009\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\000\000\000\000\000\000\005\000\000\000\
\060\000\001\000\000\000\011\000\019\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\055\000\057\000\000\000\000\000\041\000\000\000\000\000\035\000\
\000\000\047\000\000\000\036\000\000\000\010\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\042\000\043\000\000\000\034\000\
\038\000\000\000\000\000\000\000\000\000\030\000\018\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\018\000\019\000\020\000\021\000\037\000\032\000\033\000\
\022\000\023\000\024\000"

let yysindex = "\008\000\
\133\003\000\000\000\000\000\000\246\254\253\003\049\003\253\003\
\161\003\000\000\000\000\253\003\002\255\253\003\000\000\025\255\
\000\000\000\000\072\004\000\000\000\000\077\003\105\003\036\255\
\186\003\000\000\207\003\001\255\000\000\005\255\037\004\000\000\
\253\254\247\004\000\000\026\005\015\255\092\001\029\255\001\255\
\246\254\133\003\253\003\253\003\253\003\253\003\253\003\232\003\
\253\003\253\003\253\003\253\003\000\000\253\003\253\003\253\003\
\253\003\253\003\253\003\253\003\035\255\253\003\000\000\019\255\
\000\000\000\000\253\003\133\003\000\000\107\004\013\255\000\000\
\061\005\000\000\253\003\000\000\253\003\000\000\253\003\000\000\
\253\003\232\003\161\003\019\255\037\255\019\255\062\255\062\255\
\001\255\001\255\001\255\000\000\038\255\096\005\156\006\139\006\
\131\005\166\005\085\006\120\006\120\006\120\006\120\006\085\006\
\000\000\062\255\092\001\019\255\000\000\000\000\050\006\000\000\
\000\000\001\255\142\004\177\004\018\004\000\000\000\000\253\003\
\000\000\019\255\042\255\201\005\050\006\253\003\133\003\236\005\
\019\255\133\003\019\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\212\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\235\000\
\000\000\000\000\000\000\125\255\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\255\000\000\000\000\000\000\165\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\095\000\130\001\168\001\
\209\255\016\001\054\001\000\000\000\000\000\000\026\002\063\002\
\000\000\000\000\083\255\100\002\137\002\174\002\211\002\248\002\
\000\000\206\001\000\000\123\000\000\000\000\000\007\255\000\000\
\000\000\244\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\151\000\015\006\000\000\021\003\000\000\000\000\000\000\
\179\000\000\000\207\000"

let yygindex = "\000\000\
\000\000\004\000\254\255\000\000\000\000\208\255\245\255\046\000\
\056\000\251\255\000\000"

let yytablesize = 1986
let yytable = "\093\000\
\048\000\025\000\056\000\028\000\031\000\034\000\036\000\076\000\
\001\000\038\000\030\000\040\000\048\000\039\000\049\000\074\000\
\064\000\032\000\077\000\032\000\052\000\037\000\070\000\037\000\
\073\000\110\000\066\000\041\000\032\000\080\000\113\000\085\000\
\084\000\093\000\077\000\061\000\086\000\105\000\046\000\065\000\
\087\000\088\000\089\000\090\000\091\000\036\000\094\000\095\000\
\096\000\097\000\118\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\117\000\106\000\067\000\068\000\108\000\126\000\
\107\000\112\000\058\000\045\000\046\000\047\000\071\000\042\000\
\111\000\048\000\073\000\049\000\036\000\000\000\114\000\115\000\
\116\000\052\000\000\000\021\000\021\000\021\000\000\000\000\000\
\000\000\000\000\000\000\021\000\021\000\021\000\045\000\021\000\
\061\000\021\000\021\000\021\000\000\000\122\000\000\000\021\000\
\021\000\021\000\021\000\000\000\000\000\021\000\021\000\000\000\
\000\000\000\000\124\000\021\000\021\000\125\000\021\000\021\000\
\000\000\129\000\050\000\128\000\131\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000\031\000\000\000\031\000\031\000\031\000\031\000\031\000\
\000\000\031\000\031\000\031\000\031\000\000\000\059\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\031\000\000\000\000\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\053\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\028\000\028\000\028\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\000\000\
\028\000\028\000\028\000\000\000\000\000\000\000\052\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\000\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\
\012\000\000\000\049\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\012\000\012\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\048\000\048\000\035\000\035\000\035\000\035\000\
\035\000\035\000\048\000\048\000\035\000\056\000\035\000\000\000\
\048\000\048\000\035\000\035\000\035\000\035\000\000\000\035\000\
\048\000\048\000\048\000\048\000\035\000\035\000\035\000\035\000\
\035\000\035\000\048\000\035\000\048\000\048\000\035\000\046\000\
\046\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\
\046\000\046\000\046\000\000\000\046\000\000\000\046\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\046\000\046\000\000\000\058\000\058\000\058\000\000\000\058\000\
\046\000\000\000\046\000\046\000\058\000\058\000\058\000\000\000\
\058\000\000\000\058\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\058\000\058\000\058\000\000\000\045\000\
\045\000\045\000\000\000\045\000\058\000\000\000\058\000\058\000\
\045\000\045\000\045\000\000\000\045\000\000\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\000\000\050\000\050\000\050\000\000\000\050\000\
\045\000\000\000\045\000\045\000\050\000\050\000\050\000\000\000\
\050\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\050\000\050\000\050\000\000\000\059\000\
\059\000\059\000\000\000\059\000\050\000\000\000\050\000\050\000\
\059\000\059\000\059\000\000\000\059\000\000\000\059\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\000\000\053\000\053\000\053\000\000\000\053\000\
\059\000\000\000\059\000\059\000\053\000\053\000\053\000\000\000\
\053\000\000\000\053\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\000\000\052\000\
\052\000\052\000\000\000\052\000\053\000\000\000\053\000\053\000\
\052\000\052\000\052\000\000\000\052\000\000\000\052\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\052\000\
\052\000\052\000\000\000\049\000\049\000\049\000\000\000\049\000\
\052\000\000\000\052\000\052\000\049\000\049\000\049\000\000\000\
\049\000\000\000\049\000\049\000\000\000\000\000\000\000\049\000\
\000\000\000\000\049\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\017\000\017\000\017\000\
\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\017\000\017\000\017\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\016\000\000\000\016\000\016\000\016\000\016\000\
\016\000\000\000\016\000\016\000\016\000\016\000\000\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\000\000\016\000\016\000\016\000\003\000\004\000\005\000\043\000\
\081\000\045\000\046\000\047\000\000\000\007\000\000\000\082\000\
\000\000\083\000\000\000\010\000\011\000\050\000\051\000\052\000\
\000\000\000\000\000\000\012\000\000\000\000\000\013\000\055\000\
\056\000\057\000\058\000\059\000\060\000\014\000\061\000\015\000\
\016\000\062\000\013\000\013\000\013\000\013\000\013\000\000\000\
\000\000\000\000\013\000\013\000\013\000\000\000\013\000\000\000\
\013\000\013\000\013\000\013\000\013\000\000\000\013\000\013\000\
\013\000\013\000\000\000\000\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\013\000\
\015\000\015\000\015\000\015\000\015\000\000\000\000\000\000\000\
\015\000\015\000\015\000\000\000\015\000\000\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\015\000\015\000\015\000\
\000\000\000\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\015\000\015\000\015\000\014\000\014\000\
\014\000\014\000\014\000\000\000\000\000\000\000\014\000\014\000\
\014\000\000\000\014\000\000\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\014\000\000\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\014\000\015\000\015\000\015\000\015\000\
\015\000\031\000\031\000\031\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\000\000\
\031\000\000\000\031\000\015\000\000\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\015\000\015\000\007\000\007\000\007\000\000\000\000\000\000\000\
\000\000\000\000\007\000\007\000\007\000\000\000\007\000\000\000\
\007\000\007\000\007\000\007\000\007\000\000\000\007\000\007\000\
\007\000\007\000\000\000\000\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\006\000\
\006\000\006\000\000\000\000\000\000\000\000\000\000\000\006\000\
\006\000\006\000\000\000\006\000\000\000\006\000\006\000\006\000\
\000\000\006\000\000\000\006\000\006\000\006\000\006\000\000\000\
\000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\000\000\006\000\006\000\022\000\022\000\022\000\000\000\
\000\000\000\000\000\000\000\000\022\000\022\000\022\000\000\000\
\022\000\000\000\022\000\022\000\022\000\000\000\000\000\000\000\
\022\000\022\000\022\000\022\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\000\000\023\000\000\000\023\000\
\023\000\023\000\000\000\000\000\000\000\023\000\023\000\023\000\
\023\000\000\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\024\000\024\000\
\024\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\024\000\000\000\024\000\000\000\024\000\024\000\024\000\000\000\
\000\000\000\000\024\000\024\000\024\000\024\000\000\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\025\000\025\000\025\000\000\000\000\000\
\000\000\000\000\000\000\025\000\025\000\025\000\000\000\025\000\
\000\000\025\000\025\000\025\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\000\000\000\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\000\000\025\000\025\000\
\026\000\026\000\026\000\000\000\000\000\000\000\000\000\000\000\
\026\000\026\000\026\000\000\000\026\000\000\000\026\000\026\000\
\026\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\
\000\000\000\000\026\000\026\000\000\000\008\000\008\000\008\000\
\026\000\026\000\000\000\026\000\026\000\008\000\008\000\008\000\
\000\000\008\000\000\000\008\000\008\000\008\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\000\000\000\000\008\000\
\000\000\003\000\004\000\005\000\000\000\006\000\008\000\000\000\
\008\000\008\000\007\000\029\000\008\000\000\000\009\000\000\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\000\000\003\000\004\000\005\000\
\000\000\006\000\014\000\000\000\015\000\016\000\007\000\000\000\
\008\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\063\000\000\000\000\000\012\000\000\000\000\000\013\000\
\000\000\003\000\004\000\005\000\000\000\006\000\014\000\000\000\
\015\000\016\000\007\000\000\000\008\000\000\000\009\000\000\000\
\010\000\011\000\000\000\000\000\000\000\065\000\000\000\000\000\
\012\000\000\000\000\000\013\000\000\000\003\000\004\000\005\000\
\000\000\006\000\014\000\000\000\015\000\016\000\007\000\000\000\
\008\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\013\000\
\000\000\003\000\004\000\026\000\000\000\006\000\014\000\000\000\
\015\000\016\000\027\000\000\000\008\000\000\000\009\000\035\000\
\010\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\026\000\000\000\006\000\000\000\
\000\000\000\000\014\000\027\000\015\000\008\000\069\000\009\000\
\000\000\010\000\011\000\000\000\000\000\000\000\000\000\003\000\
\004\000\026\000\000\000\006\000\000\000\000\000\000\000\000\000\
\027\000\072\000\008\000\014\000\009\000\015\000\010\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\004\000\026\000\000\000\006\000\000\000\000\000\000\000\
\014\000\027\000\015\000\008\000\092\000\009\000\000\000\010\000\
\011\000\000\000\000\000\000\000\000\000\003\000\004\000\026\000\
\000\000\006\000\000\000\000\000\000\000\000\000\027\000\000\000\
\008\000\014\000\009\000\015\000\010\000\011\000\000\000\000\000\
\000\000\000\000\003\000\004\000\123\000\000\000\006\000\000\000\
\000\000\000\000\000\000\027\000\000\000\008\000\014\000\009\000\
\015\000\010\000\011\000\000\000\000\000\000\000\000\000\000\000\
\043\000\044\000\045\000\046\000\047\000\075\000\000\000\000\000\
\048\000\000\000\049\000\014\000\000\000\015\000\050\000\051\000\
\052\000\053\000\000\000\054\000\000\000\000\000\000\000\000\000\
\055\000\056\000\057\000\058\000\059\000\060\000\000\000\061\000\
\000\000\000\000\062\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\048\000\000\000\049\000\000\000\000\000\
\000\000\050\000\051\000\052\000\053\000\000\000\054\000\000\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\061\000\000\000\000\000\062\000\043\000\044\000\
\045\000\046\000\047\000\075\000\000\000\000\000\048\000\109\000\
\049\000\000\000\000\000\000\000\050\000\051\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\061\000\000\000\000\000\
\062\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\048\000\078\000\049\000\000\000\000\000\000\000\050\000\
\051\000\052\000\000\000\079\000\000\000\000\000\000\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\000\000\
\061\000\000\000\000\000\062\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\048\000\000\000\049\000\119\000\
\000\000\000\000\050\000\051\000\052\000\000\000\079\000\000\000\
\000\000\000\000\000\000\000\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\061\000\000\000\000\000\062\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\020\000\020\000\020\000\
\020\000\000\000\020\000\000\000\000\000\000\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\020\000\000\000\
\000\000\020\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\048\000\078\000\049\000\000\000\000\000\000\000\
\050\000\051\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\000\000\061\000\000\000\000\000\062\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\000\000\048\000\000\000\049\000\
\000\000\000\000\000\000\050\000\051\000\052\000\000\000\079\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\061\000\000\000\000\000\062\000\
\043\000\044\000\045\000\046\000\047\000\075\000\000\000\000\000\
\048\000\000\000\049\000\000\000\000\000\000\000\050\000\051\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\056\000\057\000\058\000\059\000\060\000\000\000\061\000\
\000\000\000\000\062\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\048\000\000\000\049\000\119\000\000\000\
\000\000\050\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\061\000\000\000\000\000\062\000\043\000\044\000\
\045\000\046\000\047\000\120\000\000\000\000\000\048\000\000\000\
\049\000\000\000\000\000\000\000\050\000\051\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\061\000\000\000\000\000\
\062\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\048\000\000\000\049\000\000\000\000\000\000\000\050\000\
\051\000\052\000\121\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\000\000\
\061\000\000\000\000\000\062\000\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\048\000\127\000\049\000\000\000\
\000\000\000\000\050\000\051\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\061\000\000\000\000\000\062\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\130\000\049\000\000\000\000\000\000\000\050\000\051\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\061\000\000\000\
\000\000\062\000\020\000\020\000\020\000\020\000\020\000\000\000\
\000\000\000\000\020\000\020\000\020\000\000\000\000\000\000\000\
\020\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\020\000\000\000\000\000\020\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\000\000\048\000\000\000\049\000\
\000\000\000\000\000\000\050\000\051\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\061\000\000\000\000\000\062\000\
\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\
\048\000\000\000\049\000\000\000\000\000\000\000\050\000\051\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\057\000\058\000\059\000\000\000\000\000\061\000\
\000\000\000\000\062\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\048\000\000\000\049\000\000\000\000\000\
\000\000\050\000\051\000\052\000\000\000\000\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\048\000\000\000\
\049\000\000\000\061\000\000\000\050\000\062\000\052\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\048\000\
\000\000\049\000\000\000\000\000\000\000\061\000\000\000\052\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\000\000\
\000\000\062\000"

let yycheck = "\048\000\
\000\000\012\001\000\000\006\000\007\000\008\000\009\000\011\001\
\001\000\012\000\007\000\014\000\012\001\012\001\014\001\011\001\
\022\000\011\001\022\001\013\001\020\001\013\001\025\000\015\001\
\027\000\013\001\023\000\003\001\022\001\015\001\079\000\003\001\
\038\000\082\000\022\001\035\001\042\000\003\001\000\000\021\001\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\013\001\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\022\001\062\000\025\001\026\001\068\000\022\001\
\067\000\077\000\000\000\006\001\007\001\008\001\025\000\016\000\
\075\000\012\001\077\000\014\001\079\000\255\255\081\000\082\000\
\083\000\020\001\255\255\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\000\000\013\001\
\035\001\015\001\016\001\017\001\255\255\107\000\255\255\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\255\255\
\255\255\255\255\117\000\033\001\034\001\120\000\036\001\037\001\
\255\255\127\000\000\000\126\000\130\000\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\000\000\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\000\000\015\001\016\001\017\001\018\001\019\001\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\255\255\255\255\255\255\000\000\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\255\255\021\001\022\001\023\001\
\024\001\255\255\000\000\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\011\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\001\001\
\002\001\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\001\001\002\001\003\001\255\255\005\001\
\034\001\255\255\036\001\037\001\010\001\011\001\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\026\001\027\001\255\255\001\001\
\002\001\003\001\255\255\005\001\034\001\255\255\036\001\037\001\
\010\001\011\001\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\001\001\002\001\003\001\255\255\005\001\
\034\001\255\255\036\001\037\001\010\001\011\001\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\026\001\027\001\255\255\001\001\
\002\001\003\001\255\255\005\001\034\001\255\255\036\001\037\001\
\010\001\011\001\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\001\001\002\001\003\001\255\255\005\001\
\034\001\255\255\036\001\037\001\010\001\011\001\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\026\001\027\001\255\255\001\001\
\002\001\003\001\255\255\005\001\034\001\255\255\036\001\037\001\
\010\001\011\001\012\001\255\255\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\026\001\027\001\255\255\001\001\002\001\003\001\255\255\005\001\
\034\001\255\255\036\001\037\001\010\001\011\001\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\021\001\
\255\255\255\255\024\001\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\255\255\036\001\037\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\037\001\038\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\038\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\001\001\002\001\003\001\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\037\001\038\001\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\255\255\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\036\001\037\001\038\001\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\009\001\010\001\
\011\001\255\255\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\038\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\038\001\001\001\002\001\003\001\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\255\255\036\001\037\001\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\255\255\013\001\255\255\015\001\016\001\017\001\
\255\255\019\001\255\255\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\255\255\036\001\037\001\001\001\002\001\003\001\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\255\255\
\013\001\255\255\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\001\001\002\001\003\001\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\011\001\255\255\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\036\001\037\001\001\001\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\011\001\255\255\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\001\001\002\001\003\001\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\255\255\013\001\255\255\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\028\001\255\255\001\001\002\001\003\001\
\033\001\034\001\255\255\036\001\037\001\009\001\010\001\011\001\
\255\255\013\001\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\255\255\255\255\027\001\
\255\255\001\001\002\001\003\001\255\255\005\001\034\001\255\255\
\036\001\037\001\010\001\011\001\012\001\255\255\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\001\001\002\001\003\001\
\255\255\005\001\034\001\255\255\036\001\037\001\010\001\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\255\255\255\255\
\255\255\021\001\255\255\255\255\024\001\255\255\255\255\027\001\
\255\255\001\001\002\001\003\001\255\255\005\001\034\001\255\255\
\036\001\037\001\010\001\255\255\012\001\255\255\014\001\255\255\
\016\001\017\001\255\255\255\255\255\255\021\001\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\001\001\002\001\003\001\
\255\255\005\001\034\001\255\255\036\001\037\001\010\001\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\255\255\001\001\002\001\003\001\255\255\005\001\034\001\255\255\
\036\001\037\001\010\001\255\255\012\001\255\255\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\005\001\255\255\
\255\255\255\255\034\001\010\001\036\001\012\001\013\001\014\001\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\255\255\005\001\255\255\255\255\255\255\255\255\
\010\001\011\001\012\001\034\001\014\001\036\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\255\255\005\001\255\255\255\255\255\255\
\034\001\010\001\036\001\012\001\013\001\014\001\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\255\255\005\001\255\255\255\255\255\255\255\255\010\001\255\255\
\012\001\034\001\014\001\036\001\016\001\017\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\255\255\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\012\001\034\001\014\001\
\036\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\255\255\014\001\034\001\255\255\036\001\018\001\019\001\
\020\001\021\001\255\255\023\001\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\035\001\
\255\255\255\255\038\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\255\255\023\001\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\035\001\255\255\255\255\038\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\035\001\255\255\255\255\
\038\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\255\255\255\255\038\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\255\255\255\255\038\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\035\001\255\255\
\255\255\038\001\004\001\005\001\006\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\255\255\255\255\038\001\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\035\001\255\255\255\255\038\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\255\255\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\035\001\
\255\255\255\255\038\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\035\001\255\255\255\255\038\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\255\255\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\035\001\255\255\255\255\
\038\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\255\255\012\001\255\255\014\001\255\255\255\255\255\255\018\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\255\255\255\255\038\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\255\255\255\255\038\001\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\035\001\255\255\
\255\255\038\001\004\001\005\001\006\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\255\255\255\255\038\001\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\255\255\255\255\255\255\018\001\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\035\001\255\255\255\255\038\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\012\001\255\255\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\255\255\255\255\035\001\
\255\255\255\255\038\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\255\255\
\255\255\018\001\019\001\020\001\255\255\255\255\004\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\012\001\255\255\
\014\001\255\255\035\001\255\255\018\001\038\001\020\001\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\255\255\012\001\
\255\255\014\001\255\255\255\255\255\255\035\001\255\255\020\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\255\255\038\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  MOD\000\
  DIV\000\
  COLON\000\
  LPARENM\000\
  RPARENM\000\
  LPAREN\000\
  RPAREN\000\
  LPARENB\000\
  RPARENB\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  QUESTION\000\
  SEMICOLON\000\
  COMMA\000\
  EQUAL\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  ISEQUAL\000\
  LE\000\
  GE\000\
  LS\000\
  GT\000\
  NOTEQUAL\000\
  NOT\000\
  DOT\000\
  NONE\000\
  DEFINE\000\
  ADDD\000\
  EOF\000\
  "

let yynames_block = "\
  NUMBER\000\
  STRING\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 21 "parser.mly"
                            ( _1 )
# 729 "parser.ml"
               : inst list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 24 "parser.mly"
              ( N _1 )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 25 "parser.mly"
              ( N 1 )
# 742 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 26 "parser.mly"
               ( N 0 )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 27 "parser.mly"
               ( None )
# 754 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                    ( Binop ("||", _1, _3) )
# 762 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                     ( Binop("&&", _1, _3) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                                 ( Ife (_1, _3, _5) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "parser.mly"
                ( S _1 )
# 786 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                         ( _2 )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dict) in
    Obj.repr(
# 33 "parser.mly"
               ( _1 )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                     ( Binop("*", _1, _3) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                     ( Binop("+", _1, _3) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                     ( Binop("++", _1, _3) )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                     ( Binop("-", _1, _3) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                     ( Binop("/", _1, _3) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                     ( Binop("%", _1, _3) )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                              ( Get(_1, _3) )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 41 "parser.mly"
               ( Listl _1 )
# 863 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 42 "parser.mly"
              ( V _1)
# 870 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                        ( Binop("==", _1, _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                    ( Binop("<=", _1, _3) )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                     ( Binop(">=", _1, _3) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                     ( Binop("<", _1, _3) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                     ( Binop(">", _1, _3) )
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                         ( Binop ("!=", _1, _3) )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                     ( Attr (_1, _3) )
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                  ( Not (_2) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                         ( Fcall(_1, []))
# 940 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'listl) in
    Obj.repr(
# 52 "parser.mly"
                              ( Fcall(_1, _3))
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                          ( Binop("-", N 0, _2) )
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                      ( Dictle (_1, _3) )
# 963 "parser.ml"
               : 'dicte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dicte) in
    Obj.repr(
# 61 "parser.mly"
       ( [_1] )
# 970 "parser.ml"
               : 'dictel))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dictel) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dicte) in
    Obj.repr(
# 62 "parser.mly"
                      ( _3::_1)
# 978 "parser.ml"
               : 'dictel))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
                 ( Dictl [] )
# 984 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dictel) in
    Obj.repr(
# 67 "parser.mly"
                          ( Dictl _2 )
# 991 "parser.ml"
               : 'dict))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
      ( [_1] )
# 998 "parser.ml"
               : 'listl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'listl) in
    Obj.repr(
# 72 "parser.mly"
                    ( _1::_3 )
# 1006 "parser.ml"
               : 'listl))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                 ( [] )
# 1012 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listl) in
    Obj.repr(
# 77 "parser.mly"
                         ( _2 )
# 1019 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 81 "parser.mly"
                    ( [V _1; Dictl([])] )
# 1026 "parser.ml"
               : 'shead))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                           ( [V _1; _3] )
# 1034 "parser.ml"
               : 'shead))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dictel) in
    Obj.repr(
# 83 "parser.mly"
                             ( [V _1; (Dictl _3)] )
# 1042 "parser.ml"
               : 'shead))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'shead) in
    Obj.repr(
# 87 "parser.mly"
                      ( Tag((List.nth _1 0), (List.nth _1 1), (Listi [])))
# 1049 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'shead) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 88 "parser.mly"
                             ( Defn( (List.nth _2 0), (List.nth _2 1), _3) )
# 1057 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'shead) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 89 "parser.mly"
                        ( Tag( (List.nth _1 0), (List.nth _1 1), _2) )
# 1065 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 90 "parser.mly"
                                ( Listi _2 )
# 1072 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                        ( Listi [] )
# 1078 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifelif) in
    Obj.repr(
# 92 "parser.mly"
                 ( Ifel (List.rev _1) )
# 1085 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ifelif) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 93 "parser.mly"
                            ( Ifel( List.rev((N 1, _3 )::_1)) )
# 1093 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                               ( Assign (_1, _3 ) )
# 1101 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 95 "parser.mly"
                                                           ( Forl(V _3, V _5, _7, _9) )
# 1111 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 96 "parser.mly"
                                                   ( Forl(V _3, V "", _5, _7	) )
# 1120 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                             ( Skip )
# 1127 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 98 "parser.mly"
                                 ( _1 )
# 1134 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 102 "parser.mly"
           ( [_1] )
# 1141 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 103 "parser.mly"
                         ( _1::_2 )
# 1149 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 107 "parser.mly"
                   ( [(_2, _3)] )
# 1157 "parser.ml"
               : 'ifelif))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ifelif) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 108 "parser.mly"
                              ( (_3, _4)::_1 )
# 1166 "parser.ml"
               : 'ifelif))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : inst list)
